version: 2.1
executors:
  docker-builder:
    docker:
      - image: circleci/openjdk:11-jdk

jobs:
  dependency-build:
    # Prepare the build environment
    executor: docker-builder
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx512m
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Build dependency list
          command: mvn -B install -DskipTests dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - save_cache:
          paths:
            - ~/repo
          key: v1-codecheckout

  build-software:
    executor: docker-builder
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx1024m
    steps:
      - restore_cache:
          keys:
          - v1-codecheckout
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Build software
          run: mvn -B clean install
      - run:
          name: Preparing test reports
          command: mkdir -p target/junit/ && find . -type f -regex ".*/target/.*-reports/.*xml" -exec cp {} target/junit/ \;
      - store_test_results:
          path: target/junit/
      - save_cache:
          paths:
          - ~/repo
          key: v1-codecheckout-{{ checksum "pom.xml" }}

  publish-coverage:
    # Build the application including the code coverage reports
    executor: docker-builder
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx1024m
    steps:
      - restore_cache:
          keys:
          - v1-codecheckout-{{ checksum "pom.xml" }}
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Build project
          command: mvn -B coveralls:report -DrepoKey=$coverageKey

  publish-analysis:
    # analysis will perform the SonarQube quality analysis
    executor: docker-builder
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx1024m
    steps:
      - restore_cache:
          keys:
          - v1-codecheckout-{{ checksum "pom.xml" }}
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Performing analysis
          command: mvn -B -Psonar -Dsonar.login=$sonarKey

  release-dryrun:
    # verify that the software is release-able on the master branch
    executor: docker-builder
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx1024m
    steps:
      - restore_cache:
          keys:
          - v1-codecheckout
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Performing a dry run release
          command: mvn release:prepare -DdryRun=true -P release-profile -s settings.xml

  release:
    executor: docker-build
    working_directory: ~/repo
    steps:
      - restore_cache:
          keys:
          - v1-codecheckout
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Setup the PGP key
          command: |
            openssl aes-256-cbc -pass pass:$openSslPwd -in private-key.gpg.enc -out private-key.gpg -d
            gpg --import private-key.gpg
      - run:
          name: Perform release
          command: mvn -V -B -s settings.xml -P release-profile install deploy

workflows:
  version: 2
  commit-build:
    jobs:
      - dependency-build
      - build-software:
          requires:
            - dependency-build
      - publish-coverage:
          requires:
            - dependency-build
      - publish-analysis:
          requires:
            - dependency-build
          filters:
            branches:
              only: master
  release-dry-run:
    triggers:
      - schedule:
          cron: "0 0 * * 1"
          filters:
            branches:
              only: master
    jobs:
      - dependency-build
      - release-dryrun:
          requires:
            - dependency-build
